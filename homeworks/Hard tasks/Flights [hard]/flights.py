"""
Одно из возможных решений этой задачи - использовать алгоритм Флойда-Уоршелла для нахождения кратчайших путей между всеми парами городов в сети авиалиний.
В начале мы создаем матрицу смежности для всех городов, где элемент [i][j] равен стоимости прямого рейса между городами i и j. Если нет прямого рейса между городами, мы устанавливаем элемент матрицы равным бесконечности.
Затем мы запускаем алгоритм Флойда-Уоршелла, чтобы найти кратчайшие пути между всеми парами городов. Мы обновляем матрицу смежности на каждом шаге, используя более короткий путь, если он существует.
Наконец, мы находим максимальную стоимость наименьшего пути между всеми парами городов и выводим ее.
"""

import sys

# вводим C и F
C, F = map(int, input().split())

# создаем матрицу смежности для всех городов
adj_matrix = [[sys.maxsize] * C for _ in range(C)]

# заполняем матрицу смежности стоимостью прямых рейсов
for _ in range(F):
    x, y, p = map(int, input().split())
    adj_matrix[x-1][y-1] = p
    adj_matrix[y-1][x-1] = p

# запускаем алгоритм Флойда-Уоршелла для нахождения кратчайших путей
for k in range(C):
    for i in range(C):
        for j in range(C):
            adj_matrix[i][j] = min(adj_matrix[i][j], adj_matrix[i][k] + adj_matrix[k][j])

# находим максимальную стоимость наименьшего пути между всеми парами городов
max_cost = 0
for i in range(C):
    for j in range(i+1, C):
        max_cost = max(max_cost, adj_matrix[i][j])

# выводим максимальную стоимость
print(max_cost)